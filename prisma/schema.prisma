generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  nickname        String           @unique
  image           String?          @default("")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  articles        Article[]
  products        Product[]
  productComments ProductComment[]
  articleComments ArticleComment[]
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  price           Float
  tags            String[]
  images          String[]
  favoriteCount   Int              @default(0)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productComments ProductComment[]
}

model Article {
  id              Int              @id @default(autoincrement())
  title           String
  content         String
  favoriteCount   Int              @default(0)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  articleComments ArticleComment[]
}

model ProductComment {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  content       String
  favoriteCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ArticleComment {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId     Int
  content       String
  favoriteCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
